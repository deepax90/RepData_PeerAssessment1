# Plot the graph
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
# PLOT 1
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power", cex=0.2)
# PLOT 2
plot(datetime, Voltage, type="l", xlab="datetime", ylab="Voltage")
# PLOT 3
plot(datetime, Sub_metering_1, type="l", ylab="Energy sub metering", xlab="")
lines(datetime, Sub_metering_2, type="l", col="red")
lines(datetime, Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
# PLOT 4
plot(datetime, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf = read.csv(path2csv,stringsAsFactors = FALSE)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran -time)
select(cran, -time)
select(cran, -X:size)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by()
?group_by()
?group_by
by_package <- group_by(cran,variable)
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probls = 0.99)
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(by_package, count > 679)
top_counts <- filter(by_package, count > 679)
fjei
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probls = 0.99)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
?mutate
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
View(students2)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex","class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
reset()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
?mutate
submit()
students4
submit()
?unique
submit()
submit()
submit()
submit()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
passed
View(passed)
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed,failed)
sat
?gather
?separate
submit()
submit()
submit()
submit()
?mutate
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
day(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("192012--")
ymd("192012//")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt1)
ymd(dt2)
| update(this_moment, hours = 8, minutes = 34, seconds = 55).
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
?now
now(tzone = "America/New_York")
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time <- myd("June 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long(last_time,arrive)
how_long <- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
?clear
?delete
?remove
rm
rm(all)
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1,9,3.14)
?cc
?cc
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd(0)
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.parth()
file.parth("mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink('testdir2')
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
rm("testdir")
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Deepak")
my_name <- c(my_char, "Deepak")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"))
paste(1:3,c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
x*3
y<- rnorm(1000)
z <- rep(NA, 1000)
my_date <- sample(c(y,z),100)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
swirl()
library(swirl)
swirl()
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- (1:20,4,5)
my_matrix2 <- (1:20,4,5)
my_matrix2 <- (c(1:20),4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","rating","test")
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data,cnames)
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6!= 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints)
which(ints > 7
)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
set.seed(1)
rpois(5,2)
set.seed(1)
rpois(5,2)
?set.seed
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(x)
var(x)
var(p)
mean(p)
sum(temp["X",]*temp["Prob",)
sum(temp["X",]*temp["Prob",])
1*0.1 + 2*0.2 + 3*0.3 + 4*.4
x <- 0.75*0.3
y <- 0.48*0.7
z <- x/(x+y)
z
?knitr
library(knitr)
install.packages("knirt")
install.packages("knitr")
?knitr
library(knitr)
?knitr
exir
exit
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mu <- c(0.0025, 0.1471, 0.300, 1.077)
minu <- sum(x*w)/sum(w)
final <- sum((w*(x - minu))^2)
final <- sum(w*(x - minu)^2)
minu
mu <- c(0.1471, 1.077, 0.0025, 0.300)
for (v in mu)
{print( c(v, sum(w*(x-v)^2)) )}
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
num <- sum(y*x)
den <- sum(x^2)
num/den
data(mtcars)
y <- mpg
?mtcars
View(mtcars)
y <- mtcars$outcome
x <- mtcars$weight
num/den
num <- sum(y*x)
den <- sum(x^2)
num/den
y <- mtcars$mpg
num <- sum(y*x)
den <- sum(x^2)
num/den
y
x
x <- mtcars$wt
num <- sum(y*x)
den <- sum(x^2)
num/den
1/(num/den)
?cor
cor(y,x)*sd(y)/sd(x)
1.5*0.4
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
s(x)
sd(x)
z <- (x - mean(x))/sd(x)
z
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
mean(y)
b1 <- cor(y,x)*sd(y)/sd(x)
b2 <- mean(y) - b1*mean(x)
b2
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- mean(x)
z <- sum((x-mean(x)^2))
z
y
data <- read.csv("activity.csv")
setwd("C:/Users/Deepak/Dropbox/coursera/repdata/project1")
setwd("C:/Users/Deepak/Dropbox/coursera/repdata/project1/RepData_PeerAssessment1/")
data <- read.csv("activity.csv")
dt <- data.table(data)[, lapply(.SD, sum), by = date]
library(datatable)
library(data.table)
dt <- data.table(data)[, lapply(.SD, sum), by = date]
head(dt)
dt[,2]
dt[,2:@]
dt[,2:2]
dt[,2, with=FALSE]
hist(dt[,2, with=FALSE], col = "red")
a <- dt[,2,with=FALSE]
a
hist(a)
x
summary(a)
a <- a[!is.na(a)]
a[2]
b <- is.na(a)
b
c <- a[b]
